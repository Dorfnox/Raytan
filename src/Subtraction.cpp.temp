#include "Subtraction.hpp"

Subtraction::Subtraction(IObject *positive, IObject *negative)
{
	*this = *positive;
	_positive = positive;
	_negative = negative;
}

std::vector<double>	findDistances(const Ray& ray)
{
	std::vector<double> p = _positive->findDistances(ray);
	std::vector<double> n = _negative->findDistances(ray);

	//stuff...

	return p;
}

glm::dvec3 findNormal(const glm::dvec3& intersection, const Ray& ray) const
{
	// an encoded bit of 1 means a positive object
	if (DOUBLE_DECODE(intersection.x))
		return _positive->findNormal(intersection, ray);
	return _negative->findNormal(intersection, ray);
}

glm::dvec2 uvMap(const glm::dvec3& intersection, const glm::dvec3& normal) const
{
	if (DOUBLE_DECODE(intersection.x))
		return _positive->uvMap(intersection, normal);
	return _negative->uvMap(intersection, normal);
}
